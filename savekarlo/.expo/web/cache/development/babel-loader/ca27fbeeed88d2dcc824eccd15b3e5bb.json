{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { auth, db } from \"../firebase\";\n\nfunction FetchCommitteeJunction(member_id) {\n  var myCommittees;\n  return _regeneratorRuntime.async(function FetchCommitteeJunction$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(db.collection(\"committees\").where(\"belongsTo\", \"==\", member_id).get());\n\n        case 2:\n          myCommittees = _context.sent;\n          return _context.abrupt(\"return\", committees.docs.filter(function (doc) {\n            return doc.exists;\n          }).map(function (doc) {\n            return _objectSpread({\n              id: doc.id\n            }, doc.data());\n          }));\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default FetchCommitteeJunction;","map":{"version":3,"sources":["E:/savekarlonative/savekarlo/many2many/FetchCommitteeJunction.js"],"names":["auth","db","FetchCommitteeJunction","member_id","collection","where","get","myCommittees","committees","docs","filter","doc","exists","map","id","data"],"mappings":";;;;;;;AAAA,SAASA,IAAT,EAAeC,EAAf;;AAEA,SAAeC,sBAAf,CAAsCC,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAC+BF,EAAE,CAC1BG,UADwB,eAExBC,KAFwB,CAElB,WAFkB,EAEL,IAFK,EAECF,SAFD,EAGxBG,GAHwB,EAD/B;;AAAA;AACUC,UAAAA,YADV;AAAA,2CAMaC,UAAU,CAACC,IAAX,CAAgBC,MAAhB,CAAuB,UAAAC,GAAG;AAAA,mBAAIA,GAAG,CAACC,MAAR;AAAA,WAA1B,EAA0CC,GAA1C,CAA8C,UAAAF,GAAG;AAAA;AAAOG,cAAAA,EAAE,EAAEH,GAAG,CAACG;AAAf,eAAsBH,GAAG,CAACI,IAAJ,EAAtB;AAAA,WAAjD,CANb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBE,eAAeb,sBAAf","sourcesContent":["import { auth, db } from '../firebase';\r\n\r\nasync function FetchCommitteeJunction(member_id) {\r\n    const myCommittees = await db\r\n      .collection(`committees`)\r\n      .where(\"belongsTo\", \"==\", member_id)\r\n      .get();\r\n  \r\n      return committees.docs.filter(doc => doc.exists).map(doc => ({ id: doc.id, ...doc.data() }));\r\n  //   const committees = await Promise.all(\r\n  //     junctions.docs\r\n  //       .filter(doc => doc.exists)\r\n  //       .map(doc => db.doc(`committees/${doc.data().com_id}`).get())\r\n  //   );\r\n  //  console.log(\"the comm juncitio\",committees)\r\n  //   return committees.filter(doc => doc.exists).map(doc => ({ id: doc.id, ...doc.data() }));\r\n  }\r\n\r\n  export default FetchCommitteeJunction;"]},"metadata":{},"sourceType":"module"}